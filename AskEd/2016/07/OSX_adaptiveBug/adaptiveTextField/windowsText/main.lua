--[[************************************************************************************DEMO PROJECTwindowsText module for Corona SDKCopyright (c) 2015 Jason Schroederhttp://www.jasonschroeder.comhttp://www.twitter.com/schroederapps************************************************************************************]]---------------------------------------------------------------------------------------- REQUIRE WINDOWSTEXT MODULE------------------------------------------------------------------------------------local windowsText = require "windowsText"windowsText.enable()-------------------------------------------------------------------------------------- LOCAL POSITIONING VARIABLES------------------------------------------------------------------------------------local centerX = display.contentCenterXlocal centerY = display.contentCenterYlocal screenTop = math.floor(display.screenOriginY)local screenLeft = math.floor(display.screenOriginX)local screenBottom = display.contentHeight - screenToplocal screenRight = display.contentWidth - screenLeftlocal screenWidth = screenRight - screenLeftlocal screenHeight = screenBottom - screenTop-------------------------------------------------------------------------------------- FORWARD DECLARE LOCAL VARIABLES------------------------------------------------------------------------------------local widget = require("widget")-- DISPLAY GROUPS:local group = display.newGroup()local textFieldGroup = display.newGroup()local textBoxGroup = display.newGroup()-- DISPLAY OBJECTS:local bg, bsod, windows-- FUNCTIONS:local makeTextField-- MISC:-------------------------------------------------------------------------------------- CREATE BACKGROUND VISUALS------------------------------------------------------------------------------------bg = display.newRect(group, centerX, centerY, screenWidth, screenHeight)bg:setFillColor(0, 0, 170/255)bsod = display.newImage(group, "bsod.png")bsod.x, bsod.y = centerX, screenTopbsod.anchorY = 0bsod.alpha = .5windows = display.newImage(group, "windows.png")windows.x, windows.y = screenRight, screenBottomwindows.anchorX, windows.anchorY = 1, 1-------------------------------------------------------------------------------------- CREATE NEWTEXTFIELD GROUP------------------------------------------------------------------------------------local function makeTextField()	-- create parent group	display.remove(textBoxGroup)	display.remove(textFieldGroup)	textFieldGroup = display.newGroup()	group:insert(textFieldGroup)		-- create text field	local textField = native.newTextField(centerX, screenTop + 200, screenWidth * .85, 60)	textFieldGroup:insert(textField)	textField.placeholder = "native.newTextField"	textField.align = "center"	textField.isSecure = false	textField.hasBackground = true		-- create size slider	local size, sizeSlider, sizeListener	function sizeListener(event)		textField.size = math.floor(10 + event.value)		size.text = "textField.size: " .. tostring(textField.size)	end		sizeSlider = widget.newSlider({		x = centerX,		y = screenTop + 400,		oritentation = "horizontal",		width = textField.width,		value = 50,		listener = sizeListener	})	textField.size = math.floor(10 + sizeSlider.value)	textFieldGroup:insert(sizeSlider)		size = display.newText({		parent = textFieldGroup,		text = "textField.size: " .. math.floor(textField.size),		fontSize = 20,		x = sizeSlider.x - sizeSlider.width * .5,		y = sizeSlider.y - sizeSlider.height*.5,	})	size.anchorX, size.anchorY = 0, 1		-- create alignment selection	local align, alignButtons, alignListener	function alignListener(event)		textField.align = event.target.segmentLabel	end		alignButtons = widget.newSegmentedControl({		x = centerX,		y = sizeSlider.y + 100,		segmentWidth = screenWidth * .28,		segments = { "left", "center", "right" },		defaultSegment = 2,		labelSize = 20,		onPress = alignListener	})	textFieldGroup:insert(alignButtons)		align = display.newText({		parent = textFieldGroup,		text = "textField.align:",		fontSize = 20,		x = alignButtons.x - alignButtons.width * .5,		y = alignButtons.y - alignButtons.height*.5,	})	align.anchorX, align.anchorY = 0, 1			-- create font selection	local font, fontButtons, fontListener	function fontListener(event)		local newFont = event.target.segmentLabel		if newFont == "native.systemFont" then newFont = native.systemFont end		textField.font = native.newFont(newFont)	end		fontButtons = widget.newSegmentedControl({		x = centerX,		y = alignButtons.y + 100,		segmentWidth = screenWidth * .28,		segments = { "native.systemFont", "Courier", "Dosis" },		defaultSegment = 1,		labelSize = 20,		onPress = fontListener	})	textFieldGroup:insert(fontButtons)		font = display.newText({		parent = textFieldGroup,		text = "textField.font:",		fontSize = 20,		x = fontButtons.x - fontButtons.width * .5,		y = fontButtons.y - fontButtons.height*.5,	})	font.anchorX, font.anchorY = 0, 1		-- create isSecure selection	local secure, secureButtons, secureListener	function secureListener(event)		if event.target.segmentLabel == "true" then			textField.isSecure = true		else			textField.isSecure = false		end	end		secureButtons = widget.newSegmentedControl({		x = centerX - screenWidth*.23,		y = fontButtons.y + 100,		segmentWidth = 140,		segments = { "false", "true" },		defaultSegment = 1,		labelSize = 20,		onPress = secureListener	})	textFieldGroup:insert(secureButtons)		secure = display.newText({		parent = textFieldGroup,		text = "textField.isSecure:",		fontSize = 20,		x = secureButtons.x - secureButtons.width * .5,		y = secureButtons.y - secureButtons.height*.5,	})	secure.anchorX, secure.anchorY = 0, 1		-- create isbackground selection	local background, backgroundButtons, backgroundListener	function backgroundListener(event)		if event.target.segmentLabel == "true" then			textField.hasBackground = true		else			textField.hasBackground = false		end	end		backgroundButtons = widget.newSegmentedControl({		x = centerX + screenWidth*.23,		y = fontButtons.y + 100,		segmentWidth = 140,		segments = { "false", "true" },		defaultSegment = 2,		labelSize = 20,		onPress = backgroundListener	})	textFieldGroup:insert(backgroundButtons)		background = display.newText({		parent = textFieldGroup,		text = "textField.hasBackground:",		fontSize = 20,		x = backgroundButtons.x + backgroundButtons.width * .5,		y = backgroundButtons.y - backgroundButtons.height*.5,	})	background.anchorX, background.anchorY = 1, 1		-- create textColor selection	local textColor, textColorButtons, textColorListener	function textColorListener(event)		local colors = {			black = {0, 0, 0},			red = {1, 0, 0},			green = {0, 1, 0},			blue = {0, 0, 1},		}		local selection = colors[event.target.segmentLabel]				textField:setTextColor(selection[1], selection[2], selection[3])	end		textColorButtons = widget.newSegmentedControl({		x = centerX,		y = backgroundButtons.y + 100,		segmentWidth = screenWidth * .2,		segments = { "black", "red", "green", "blue" },		defaultSegment = 1,		labelSize = 20,		onPress = textColorListener	})	textFieldGroup:insert(textColorButtons)		textColor = display.newText({		parent = textFieldGroup,		text = "textField:setTextColor():",		fontSize = 20,		x = textColorButtons.x - textColorButtons.width * .5,		y = textColorButtons.y - textColorButtons.height*.5,	})	textColor.anchorX, textColor.anchorY = 0, 1		-- resizeFontToFitHeight	local fontToHeight = widget.newButton({		x = centerX - screenWidth*.25,		y = textColorButtons.y + 85,		label = "textField:resizeFontToFitHeight()",		fontSize = 20,		shape = "roundedRect",		height = 30,		width = screenWidth * .4,		fillColor = { default={ 22/255, 126/255, 252/255, .25 }, over={ 22/255, 126/255, 252/255, 1 } },		strokeColor = { default={ 22/255, 126/255, 252/255, .5 }, over={ 22/255, 126/255, 252/255, .5 } },		labelColor = { default={ 22/255, 126/255, 252/255 }, over={ 1, 1, 1, 1 } },		strokeWidth = 2,		onRelease = textField.resizeFontToFitHeight,	})	textFieldGroup:insert(fontToHeight)		-- resizeHeightToFitFont	local fontToHeight = widget.newButton({		x = centerX + screenWidth*.25,		y = textColorButtons.y + 85,		label = "textField:resizeHeightToFitFont()",		fontSize = 20,		shape = "roundedRect",		height = 30,		width = screenWidth * .4,		fillColor = { default={ 22/255, 126/255, 252/255, .25 }, over={ 22/255, 126/255, 252/255, 1 } },		strokeColor = { default={ 22/255, 126/255, 252/255, .5 }, over={ 22/255, 126/255, 252/255, .5 } },		labelColor = { default={ 22/255, 126/255, 252/255 }, over={ 1, 1, 1, 1 } },		strokeWidth = 2,		onRelease = textField.resizeHeightToFitFont,	})	textFieldGroup:insert(fontToHeight)end-------------------------------------------------------------------------------------- CREATE NEWTEXTBOX GROUP------------------------------------------------------------------------------------local function makeTextBox()	-- create parent group	display.remove(textFieldGroup)	display.remove(textBoxGroup)	textBoxGroup = display.newGroup()	group:insert(textBoxGroup)		-- create text field	local textBox = native.newTextBox(centerX, screenTop + 200, screenWidth * .85, 250)	textBoxGroup:insert(textBox)	textBox.placeholder = "native.newTextBox\n\nMultiple lines of text!"	textBox.align = "left"	textBox.hasBackground = true	timer.performWithDelay(0, function() textBox.size = 25 end)	textBox.isEditable = true		-- create size slider	local size, sizeSlider, sizeListener	function sizeListener(event)		textBox.size = math.floor(10 + event.value/3)		size.text = "textBox.size: " .. tostring(textBox.size)	end		sizeSlider = widget.newSlider({		x = centerX,		y = screenTop + 400,		oritentation = "horizontal",		width = textBox.width,		value = 50,		listener = sizeListener	})	textBox.size = math.floor(10 + sizeSlider.value)	textBoxGroup:insert(sizeSlider)		size = display.newText({		parent = textBoxGroup,		text = "textBox.size: 25",		fontSize = 20,		x = sizeSlider.x - sizeSlider.width * .5,		y = sizeSlider.y - sizeSlider.height*.5,	})	size.anchorX, size.anchorY = 0, 1		-- create alignment selection	local align, alignButtons, alignListener	function alignListener(event)		textBox.align = event.target.segmentLabel	end		alignButtons = widget.newSegmentedControl({		x = centerX,		y = sizeSlider.y + 100,		segmentWidth = screenWidth * .28,		segments = { "left", "center", "right" },		defaultSegment = 1,		labelSize = 20,		onPress = alignListener	})	textBoxGroup:insert(alignButtons)		align = display.newText({		parent = textBoxGroup,		text = "textBox.align:",		fontSize = 20,		x = alignButtons.x - alignButtons.width * .5,		y = alignButtons.y - alignButtons.height*.5,	})	align.anchorX, align.anchorY = 0, 1			-- create font selection	local font, fontButtons, fontListener	function fontListener(event)		local newFont = event.target.segmentLabel		if newFont == "native.systemFont" then newFont = native.systemFont end		textBox.font = native.newFont(newFont)	end		fontButtons = widget.newSegmentedControl({		x = centerX,		y = alignButtons.y + 100,		segmentWidth = screenWidth * .28,		segments = { "native.systemFont", "Courier", "Dosis" },		defaultSegment = 1,		labelSize = 20,		onPress = fontListener	})	textBoxGroup:insert(fontButtons)		font = display.newText({		parent = textBoxGroup,		text = "textBox.font:",		fontSize = 20,		x = fontButtons.x - fontButtons.width * .5,		y = fontButtons.y - fontButtons.height*.5,	})	font.anchorX, font.anchorY = 0, 1		-- create isEditable selection	local secure, secureButtons, secureListener	function secureListener(event)		if event.target.segmentLabel == "true" then			textBox.isEditable = true		else			textBox.isEditable = false		end	end		secureButtons = widget.newSegmentedControl({		x = centerX - screenWidth*.23,		y = fontButtons.y + 100,		segmentWidth = 140,		segments = { "false", "true" },		defaultSegment = 2,		labelSize = 20,		onPress = secureListener	})	textBoxGroup:insert(secureButtons)		secure = display.newText({		parent = textBoxGroup,		text = "textBox.isEditable:",		fontSize = 20,		x = secureButtons.x - secureButtons.width * .5,		y = secureButtons.y - secureButtons.height*.5,	})	secure.anchorX, secure.anchorY = 0, 1		-- create isbackground selection	local background, backgroundButtons, backgroundListener	function backgroundListener(event)		if event.target.segmentLabel == "true" then			textBox.hasBackground = true		else			textBox.hasBackground = false		end	end		backgroundButtons = widget.newSegmentedControl({		x = centerX + screenWidth*.23,		y = fontButtons.y + 100,		segmentWidth = 140,		segments = { "false", "true" },		defaultSegment = 2,		labelSize = 20,		onPress = backgroundListener	})	textBoxGroup:insert(backgroundButtons)		background = display.newText({		parent = textBoxGroup,		text = "textBox.hasBackground:",		fontSize = 20,		x = backgroundButtons.x + backgroundButtons.width * .5,		y = backgroundButtons.y - backgroundButtons.height*.5,	})	background.anchorX, background.anchorY = 1, 1		-- create textColor selection	local textColor, textColorButtons, textColorListener	function textColorListener(event)		local colors = {			black = {0, 0, 0},			red = {1, 0, 0},			green = {0, 1, 0},			blue = {0, 0, 1},		}		local selection = colors[event.target.segmentLabel]				textBox:setTextColor(selection[1], selection[2], selection[3])	end		textColorButtons = widget.newSegmentedControl({		x = centerX,		y = backgroundButtons.y + 100,		segmentWidth = screenWidth * .2,		segments = { "black", "red", "green", "blue" },		defaultSegment = 1,		labelSize = 20,		onPress = textColorListener	})	textBoxGroup:insert(textColorButtons)		textColor = display.newText({		parent = textBoxGroup,		text = "textField:setTextColor():",		fontSize = 20,		x = textColorButtons.x - textColorButtons.width * .5,		y = textColorButtons.y - textColorButtons.height*.5,	})	textColor.anchorX, textColor.anchorY = 0, 1end-------------------------------------------------------------------------------------- BUTTONS TO SWITCH BETWEEN INPUT TYPES------------------------------------------------------------------------------------local function inputTypeListener(event)	if event.target.segmentLabel == "native.newTextField" then		makeTextField()	else		makeTextBox()	endendlocal inputType = widget.newSegmentedControl({	x = centerX,	y = screenBottom - 20,	segmentWidth = screenWidth * .475,	segments = { "native.newTextField", "native.newTextBox" },	defaultSegment = 1,	labelSize = 28,	labelFont = "courier",	onPress = inputTypeListener})inputType.anchorY = 1group:insert(inputType)makeTextField()