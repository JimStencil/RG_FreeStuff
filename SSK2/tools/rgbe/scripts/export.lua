-- =============================================================
-- Copyright Roaming Gamer, LLC. 2008-2016 (All Rights Reserved)
-- =============================================================
-- Roaming Gamer Button (Presets) Editor (a free SSK2 co-product)
-- =============================================================
-- See README.md for full license details.
-- =============================================================
--   Last Updated: 06 JAN 2017
-- =============================================================
-- Useful Localizations
local getTimer          = system.getTimer
local mRand				= math.random
local tpd 				= timer.performWithDelay

local common 	= require "scripts.common"

local export = {}

-- =============================================================
-- Export Project
-- =============================================================
local function onExportCurrentCatalog( event )
	local RGFiles = ssk.files

	local records = require "scripts.records"
	if( not records.all or #records.all == 0 ) then return end

	local curEntries = records.current
	local allCatalogs = records.all

	local curCatalog

	for i = 1, #allCatalogs do
		if(allCatalogs[i].entries == curEntries ) then
			curCatalog = allCatalogs[i]
		end
	end

	table.dump( curCatalog )
	print(curEntries)

	local catalogName = io.cleanFileName( curCatalog.name )

	--
	-- Create folders for our export
	--
	local saveFolder = RGFiles.desktop.getDesktopPath(  common.outputFolder )
	RGFiles.util.mkFolder( saveFolder )
	saveFolder = saveFolder .. "/" .. catalogName
	RGFiles.util.mkFolder( saveFolder )

	local imagesFolder = saveFolder .. "/images"
	RGFiles.util.mkFolder( imagesFolder )

	local presetsFolder = saveFolder .. "/presets"
	RGFiles.util.mkFolder( presetsFolder )

	--
	-- Copy images into proper folder(s)
	--
	for i = 1, #curEntries do
		--table.dump(curEntries[i].definition)
		for k,v in pairs(curEntries[i].definition) do
			if( string.match(v,"%.png") or string.match(v,"%.jpg")) then
				print(v)
				local parts = string.split( v, "/")
				if( not RGFiles.util.exists( imagesFolder .. "/" .. parts[1] ) ) then
					RGFiles.util.mkFolder( imagesFolder .. "/" .. parts[1] )
				end
				local dst = imagesFolder .. "/" .. v
				if( not RGFiles.util.exists( dst ) ) then
					local src = RGFiles.resource.getPath( "incoming/" .. v )
					RGFiles.util.cpFile( src, dst )
				end
			end
		end
	end

	--
	-- Create presets file
	-- 
	local path = string.format( "%s/%s.lua", presetsFolder, catalogName )
	print(path)
	local lua_script = 
	"-- =============================================================\n" ..
	"-- Example Generated by Roaming Gamer Button Editor\n" ..
	"-- https://roaminggamer.github.io/RGDocs/pages/RGBE/\n" ..
	"-- =============================================================\n\n" ..
	'local mgr 				= require "ssk2.core.interfaces.buttons"\n' .. 
	'local imagePath 		= "images/"\n\n'  

	for i = 1, #curEntries do
		local entry = curEntries[i]
		local definition = entry.definition
		lua_script = lua_script .. '-- ==\n' ..
		'-- ' .. entry.name .. '\n'  ..
		'-- ==\n'  ..
		'local params = \n' ..
		'{\n'

		local keys = {}

		--table.dump(curEntries[i].definition)
		for k,v in pairs(definition) do
			keys[#keys+1] = k
		end
		table.sort(keys)


		--table.dump(curEntries[i].definition)
		for i = 1, #keys do
			local key = keys[i]
			local value = definition[key]
			
			if( string.len(value) == 0 ) then
				value = nil
			elseif( value == "true") then
				value = 'true,\n'
			elseif( value == "false" ) then
				value = 'false,\n'

			elseif( string.match(value,"%,") ) then
				local tbl = string.split( value, ",")
				value = '{'
				for i = 1, #tbl do
					value = value .. tbl[i] .. ','
				end
				value = string.sub(value,1, string.len(value)-1) .. '},\n'

			elseif(tonumber(value)) then
				value = tonumber(value) .. ',\n'
			else				
				if( string.match(value,"%.png") or string.match(value,"%.jpg") ) then
					value = 'imagePath .. ' .. '"' .. value .. '",\n'
				else
					value = '"' .. value .. '",\n'
				end
			end
			if( value ) then
				lua_script = lua_script .. '\t' .. key .. " = " 
				lua_script = lua_script .. value
			end
		end
		lua_script = lua_script .. '}\n'
		lua_script = lua_script .. 'mgr:addButtonPreset( "' .. entry.name .. '", params )\n\n'

	end



	RGFiles.util.writeFile( lua_script, path )


	--
	-- Create main.lua file to allow for easy testing and to show how to include the presets file
	-- 
	local path = string.format( "%s/main.lua", saveFolder )
	local lua_script = 
	"-- =============================================================\n" ..
	"-- Example Generated by Roaming Gamer Button Editor\n" ..
	"-- https://roaminggamer.github.io/RGDocs/pages/RGBE/\n" ..
	"-- =============================================================\n\n" ..
	'-- =============================================================\n' ..
	'-- LOAD & INITIALIZE - SSK 2\n' ..
	'-- =============================================================\n' ..
	'require "ssk2.loadSSK"\n' ..
	'_G.ssk.init( { \n' ..
	'					enableAutoListeners 	= true,\n' ..
	'	            exportCore 				= true,\n' ..
	'	            exportColors 			= true,\n' ..
	'	            exportSystem 			= true,\n' ..
	'	            debugLevel 				= 0 } )\n' ..
	'-- =============================================================\n' .. 
	'require "presets.' .. catalogName .. '" -- Load the catalog\n\n' ..

	'-- Make some buttons\n' ..

	'ssk.easyIFC:presetPush( nil, "default", centerX, centerY - 160, 300, 100, "Test" )\n\n' .. 

	'ssk.easyIFC:presetToggle( nil, "default_check", centerX-120, centerY, 100, 100, "check1" )\n' ..
	'ssk.easyIFC:presetToggle( nil, "default_check", centerX, centerY, 100, 100, "check2" )\n' ..
	'ssk.easyIFC:presetToggle( nil, "default_check", centerX+120, centerY, 100, 100, "check3" )\n\n' ..

	'ssk.easyIFC:presetRadio( nil, "default_radio", centerX-120, centerY + 160, 100, 100, "radio1" )\n' ..
	'ssk.easyIFC:presetRadio( nil, "default_radio", centerX, centerY + 160, 100, 100, "radio2" )\n' ..
	'ssk.easyIFC:presetRadio( nil, "default_radio", centerX+120, centerY + 160, 100, 100, "radio3" )\n'
	RGFiles.util.writeFile( lua_script, path )
	
	--RGFiles.util.mkFolder( particlesFolder )

end; listen( "onExportCurrentCatalog", onExportCurrentCatalog )

return export